{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"corona_clustering","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyNwVZ+glIAkAlf+U1j/6fKT"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"-OIxDuqbPvLX","colab_type":"code","outputId":"db508abb-c2b6-4d58-b973-849098e497b0","executionInfo":{"status":"ok","timestamp":1589137438834,"user_tz":-330,"elapsed":1039,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"D1sPOBcASZtd","colab_type":"code","colab":{}},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","from pickle import load,dump  \n","import pandas as pd\n","import numpy as np\n","from copy import deepcopy\n","\n","from sklearn.metrics.pairwise import cosine_similarity\n","from scipy.cluster.hierarchy import fcluster\n","from scipy.cluster.hierarchy import dendrogram, linkage\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JyiYk9A-Sawi","colab_type":"code","outputId":"b33e61e4-0d2d-475e-b77e-56aaef3f4bb7","executionInfo":{"status":"ok","timestamp":1589137452859,"user_tz":-330,"elapsed":1074,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["from nltk.tokenize import TweetTokenizer\n","from nltk.corpus import stopwords\n","import nltk\n","nltk.download('stopwords')\n","from nltk.stem.snowball import SnowballStemmer\n","\n","from copy import deepcopy\n","import re\n","\n","import string\n","\n","\n","l_sw=stopwords.words(\"english\")\n","tk=TweetTokenizer()\n","snow=SnowballStemmer(\"english\")\n","\n","\n","def clean(st):\n","\n","  #Lowercase\n","  temp=deepcopy(st)\n","  temp=temp.lower()\n","\n","  #Remove whitespace\n","  temp=temp.replace(\"\\n\",\" \").replace(\"\\r\",\" \")\n","\n","  #Remove URL\n","  temp = re.sub(r\"http\\S+\", \"\", temp)\n","\n","  #Tokenise\n","  tokens=tk.tokenize(temp)\n","\n","  #remove punctuations, hashtags and stopwords\n","  cl_1=[]\n","  for i in tokens:\n","    if i not in string.punctuation and i not in l_sw and i!=\"...\":\n","      if i[0]=='#':\n","        cl_1.append(i[1:])\n","      else:\n","        cl_1.append(i)\n","  \n","  #Stem - Snowball\n","  cl_2=[snow.stem(i) for i in cl_1]\n","\n","  #Remove emojis and serialise\n","  final=''\n","\n","  ff=open(\"/content/gdrive/My Drive/Colab Notebooks/Corona_Clusters/single/to_be_deleted.txt\",\"w\")\n","\n","  for i in cl_2:\n","    try:\n","      ff.write(i)\n","      final+=(i+\" \")\n","    except:\n","      pass\n","  \n","  ff.close()\n","\n","  return final[:-1]\n","\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qvAMvcC_Sk7p","colab_type":"code","colab":{}},"source":["f=open(\"/content/gdrive/My Drive/Colab Notebooks/corona_tweets_10mins.pickle\",\"rb\")\n","d_d=load(f)\n","f.close()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fccjn8BfiTbr","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"FEWpiOB-S4fB","colab_type":"code","outputId":"30eb479a-7600-4358-a377-eec868b89d8b","executionInfo":{"status":"ok","timestamp":1589137482621,"user_tz":-330,"elapsed":1190,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"source":["d_d[0][0][0]"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'tweet_created_at': datetime.datetime(2020, 4, 22, 14, 24, 39),\n"," 'tweet_id': 1252966551529172993,\n"," 'tweet_text': \"I need a haircut in the worst way and my salon is opening on 4/23 so guess what? I'm still going to need a haircut on 4/24. #StayHome\",\n"," 'user_id': 814860257281372160}"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"KY0vxK1HtyC6","colab_type":"code","outputId":"b7fbe231-11bc-4f57-c47a-94f0191ee813","executionInfo":{"status":"ok","timestamp":1589137484196,"user_tz":-330,"elapsed":963,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["d_d[0].keys()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys([0, 1, 2, 3, 4, 5])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"uXvIuENlLgyO","colab_type":"code","colab":{}},"source":["nnff=open(\"/content/gdrive/My Drive/Colab Notebooks/corona_tweets_unpacked_proc.pickle\",\"rb\")\n","unpack=load(nnff)\n","nnff.close()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ebTT-fIZ-ePR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zn9DIzztoguH","colab_type":"code","outputId":"d8598b73-4edc-4c5f-df20-11844a4a8023","executionInfo":{"status":"ok","timestamp":1589137499398,"user_tz":-330,"elapsed":1343,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["####TD-IDF and File TextFile \n","\n","\n","#Modified cleanup\n","from nltk.tokenize import TweetTokenizer\n","from nltk.corpus import stopwords\n","import nltk\n","nltk.download('stopwords')\n","from nltk.stem.snowball import SnowballStemmer\n","\n","from copy import deepcopy\n","import re\n","\n","import string\n","\n","\n","l_sw=stopwords.words(\"english\")\n","tk=TweetTokenizer()\n","snow=SnowballStemmer(\"english\")\n","\n","\n","def clean_without(st):\n","\n","  #Lowercase\n","  temp=deepcopy(st)\n","  temp=temp.lower()\n","\n","  #Remove whitespace\n","  temp=temp.replace(\"\\n\",\" \").replace(\"\\r\",\" \")\n","\n","  #Remove URL\n","  temp = re.sub(r\"http\\S+\", \"\", temp)\n","\n","  #Tokenise\n","  tokens=tk.tokenize(temp)\n","\n","  #remove punctuations, hashtags and stopwords\n","  cl_1=[]\n","  for i in tokens:\n","    if i not in string.punctuation and i not in l_sw and i!=\"...\":\n","      if i[0]=='#':\n","        cl_1.append(i[1:])\n","      else:\n","        cl_1.append(i)\n","  \n","  #Remove emojis and serialise\n","  final=''\n","\n","  ff=open(\"/content/gdrive/My Drive/Colab Notebooks/Corona_Clusters/single/to_be_deleted.txt\",\"w\")\n","\n","  for i in cl_1:\n","    try:\n","      ff.write(i)\n","      final+=(i+\" \")\n","    except:\n","      pass\n","  \n","  ff.close()\n","\n","  return final[:-1]\n","\n","\n","def file_write(cluster_labels,l_id,nm):\n","  temp={}\n","  \n","  for i in range(len(cluster_labels)):\n","    if int(cluster_labels[i]) not in temp:\n","      temp[int(cluster_labels[i])]=[l_id[i]]\n","    else:\n","      temp[int(cluster_labels[i])].append(l_id[i])\n","    \n","  nnnfff=open(\"/content/gdrive/My Drive/Colab Notebooks/Corona_Clusters/single/\"+nm+\"single_tp.txt\",\"w\",encoding=\"utf-8\")\n","  print(\"Inside Here\")\n","\n","  for i in temp:\n","\n","    for i in temp:\n","      qq=nnnfff.write(\"\\n\\n\\nCluster \"+str(i)+\"\\n\")\n","      tw=[unpack[k][\"tweet_text\"] for k in temp[i]]\n","\n","      try:\n","        vec=TfidfVectorizer(ngram_range=(2,3),min_df=5,max_features=5,preprocessor=clean_without)\n","        vec_f=vec.fit_transform(tw).toarray()\n","      except:\n","        vec=TfidfVectorizer(ngram_range=(2,3),max_features=5,preprocessor=clean_without)\n","        vec_f=vec.fit_transform(tw_0).toarray()\n","\n","      fn_n = np.array(vec.get_feature_names())\n","\n","      for j in fn_n:\n","        nnnfff.write(j+\"\\t\")\n","      nnnfff.write(\"\\n\\n\")\n","\n","      for j in temp[i]:\n","        nnnfff.write(unpack[j][\"tweet_text\"].replace(\"\\n\",\" \").replace(\"\\r\",\" \")+\"\\n\")\n","\n","  nnnfff.close()\n","\n","      \n","\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XuOcsWpuZUgm","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","\n","def cluster(l_id,nm):\n","\n","  l_proc=[unpack[k][\"proc\"] for k in l_id]\n","\n","\n","  vec=TfidfVectorizer(ngram_range=(2,3))\n","  vec_f=vec.fit_transform(l_proc).toarray()\n","\n","  print(\"TF-IDF Done for \",nm)\n","\n","  #Cosine Similarity\n","  sm=cosine_similarity(vec_f)\n","  sm=1-sm\n","\n","  v=pd.DataFrame(sm,columns=l_id, index=l_id)\n","\n","  print(\"\\nCosine Similarity done for \",nm)\n","\n","  #HCA\n","  lk=linkage(sm,\"complete\")\n","  print(\"\\nLinkage Done\")\n","\n","  dist,mn,mx=0,0,0\n","  fig, axes = plt.subplots(figsize=(12, 8))\n","  dn=dendrogram(lk,leaf_rotation=90, leaf_font_size=8, labels=range(len(l_id)))\n","  b=list(lk)\n","  plt.show()\n","\n","  return None\n","\n","  for q in range(len(b[:-1])):\n","    if b[q+1][-2]-b[q][-2]>dist:\n","      dist=b[q+1][-2]-b[q][-2]\n","      mn=b[q][-2]\n","      mx=deepcopy(b[q+1])\n","      mn=deepcopy(b[q])\n","\n","  cluster_labels = fcluster(lk, int(mn[-2]), criterion='distance')\n","  cluster_labels1 = pd.DataFrame(cluster_labels, columns=['ClusterLabel'],index=l_id)\n","  print(set(cluster_labels))\n","\n","  nnff=open(\"/content/gdrive/My Drive/Colab Notebooks/Corona_Clusters/single/\"+nm+\"_del.pickle\",\"wb\")\n","  dump([nm,cluster_labels,l_id],nnff)\n","  nnff.close()\n","  print(\"\\nPickling Done\")\n","\n","  file_write(cluster_labels,l_id,nm)\n","\n","  print(\"\\nText File Writing Done\")\n","\n","  print(\"\\nClustering Done!\")\n","  print(\"\\n\\n\")\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aTiG6hhud4GW","colab_type":"code","colab":{}},"source":["l_id=[k[\"tweet_id\"] for k in d_d[4][3]]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZCOW2H2EOjaT","colab_type":"code","outputId":"f4ddd1fe-1424-4e79-d04d-d6e8f311219a","executionInfo":{"status":"ok","timestamp":1589137568601,"user_tz":-330,"elapsed":958,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(l_id)"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2528"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"BP0jaf6MeO-h","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":217},"outputId":"a3e4ddf6-41b7-4c40-ebf9-3ed9763160e2","executionInfo":{"status":"error","timestamp":1589136627206,"user_tz":-330,"elapsed":1066,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}}},"source":["l_id=[]\n","l_proc=[]\n","\n","for j in d_d[0]:\n","  l_id.append(j[\"tweet_id\"])\n","  l_proc.append(clean(j[\"tweet_text\"]))"],"execution_count":15,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-7c27c3360fd4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0md_d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0ml_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0ml_proc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_text\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'int' object is not subscriptable"]}]},{"cell_type":"code","metadata":{"id":"2zSmzb8Yfhp4","colab_type":"code","outputId":"eb4c9901-cb47-439d-fad9-1ac8616aae50","executionInfo":{"status":"ok","timestamp":1587821385970,"user_tz":-330,"elapsed":1068,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(l_proc)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["91132"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"Wrpx5j3_oGDd","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"MK5k6zNmh6Cc","colab_type":"code","outputId":"0e21201b-b9e4-493a-932f-86393d5b5400","executionInfo":{"status":"ok","timestamp":1589138550871,"user_tz":-330,"elapsed":2964,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":569}},"source":["cluster(l_id[:75],\"4-3\")"],"execution_count":44,"outputs":[{"output_type":"stream","text":["TF-IDF Done for  4-3\n","\n","Cosine Similarity done for  4-3\n","\n","Linkage Done\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"-h6AB8gYW2HP","colab_type":"code","outputId":"caaf6c5f-f425-4ee4-a0b1-626c19675698","executionInfo":{"status":"error","timestamp":1587820328976,"user_tz":-330,"elapsed":205215,"user":{"displayName":"Aditya Backup","photoUrl":"","userId":"12988019894355452567"}},"colab":{"base_uri":"https://localhost:8080/","height":380}},"source":["for i in d_d:\n","\n","  l_id=[k[\"tweet_id\"] for k in d_d[i]]\n","  l_proc=[clean(k[\"tweet_text\"]) for k in d_d[i]]\n","\n","  cluster(l_id,l_proc,str(i))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-ea1f5544c2c1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0ml_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_id\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0md_d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0ml_proc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mclean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_text\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0md_d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mcluster\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ml_proc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-19-ea1f5544c2c1>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0ml_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_id\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0md_d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0ml_proc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mclean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"tweet_text\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0md_d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mcluster\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ml_proc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-14-34cc4fbcca56>\u001b[0m in \u001b[0;36mclean\u001b[0;34m(st)\u001b[0m\n\u001b[1;32m     46\u001b[0m   \u001b[0mfinal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m   \u001b[0mff\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/gdrive/My Drive/Colab Notebooks/to_be_deleted.txt\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"w\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcl_2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/_bootlocale.py\u001b[0m in \u001b[0;36mgetpreferredencoding\u001b[0;34m(do_setlocale)\u001b[0m\n\u001b[1;32m     21\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mlocale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpreferredencoding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo_setlocale\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0;32mdef\u001b[0m \u001b[0mgetpreferredencoding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo_setlocale\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdo_setlocale\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_locale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnl_langinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_locale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCODESET\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}